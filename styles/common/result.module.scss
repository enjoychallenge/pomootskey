.variant_output_only_result_boxes {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
  white-space: nowrap;
  background-color: var(--muiPaletteBackgroundPaper);

  & > div {
    min-width: 100%;
    display: inline-block;

    & > div {
      display: block;
      margin-bottom: 0.4em;
      padding: 0 1vmin;

      & > p:first-child {
        font-size: small;
      }

      & > p:nth-child(2) {
        margin-bottom: 0;
        line-height: 1;

        & > span {
          text-transform: uppercase;
          font-family: 'DejaVu Sans Mono', 'ui-monospace', 'monospace',
            'monospace';
          line-height: 1;
        }
      }
    }
  }
}

.result_cases {
  overflow-y: auto;
  overflow-x: hidden;
  -webkit-overflow-scrolling: touch;
  position: relative;

  & > p {
    font-size: x-small;
  }

  & > div {
    margin-bottom: 0;
    line-height: 1;
    display: flex;
    flex-wrap: wrap;
    padding-right: var(--morseInputCharWidth);
    padding-left: var(--morseInputCharGap);
    column-gap: var(--morseInputCharGap);
    row-gap: var(--morseLineGap);

    font-family: 'DejaVu Sans Mono', 'ui-monospace', 'monospace', 'monospace';
  }
}

.result_item {
  width: var(--morseInputCharWidth);
  color: var(--muiPaletteResultMain);
  fill: var(--muiPaletteResultMain);
  stroke: var(--muiPaletteResultMain);
  cursor: pointer;
  position: relative;
  overflow: visible;
}

.result_item * {
  user-select: none;
}

.result_item {
  width: var(--morseInputCharWidth);
  color: var(--muiPaletteResultMain);
  fill: var(--muiPaletteResultMain);
  stroke: var(--muiPaletteResultMain);
  cursor: pointer;
  position: relative;
  overflow: visible;
}

.result_item * {
  user-select: none;
}

.variant {
  margin-top: var(--morseInputCharJoinerHeight);
  color: var(--muiPaletteVariantMain);
  fill: var(--muiPaletteVariantMain);
  stroke: var(--muiPaletteVariantMain);
}
.wrong {
  color: var(--muiPaletteWarningMain);
  fill: var(--muiPaletteWarningMain);
  stroke: var(--muiPaletteWarningMain);
}

.result_item > .click_area {
  height: 100%;
  width: 100vh;
  position: absolute;
  top: 0;
  left: var(--morseInputCharWidth);
}

.variant_button_wrapper {
  flex-basis: calc(var(--morseVariantButtonSize) * 1.7);
  flex-grow: 1;
  height: var(--morseVariantButtonSize);
  position: sticky;
  pointer-events: none;
  bottom: 0;
  & > button,
  & > button:focus,
  & > button:active,
  & > button:hover {
    background-color: black;
  }
  & > button {
    position: absolute;
    right: 0;
    height: 100%;
    width: var(--morseVariantButtonSize);
    min-width: var(--morseVariantButtonSize);
    pointer-events: auto;
    overflow: hidden;
    & > svg {
      width: calc(0.9 * var(--morseVariantButtonSize));
      height: calc(0.9 * var(--morseVariantButtonSize));
    }
  }
}

.result_input_char {
  height: var(--morseInputCharHeight);
  font-size: var(--morseInputCharFontSize);
  position: relative;
  display: flex;
  justify-content: center;
  font-weight: bold;
  text-align: center;
}
@keyframes insert-cursor-blink {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
}
.result_input_char_cursor_insert::before {
  content: '';
  position: absolute;
  left: calc(-0.5 * var(--morseInputCharGap) - 1px);
  width: 2px;
  height: 100%;
  background: var(--muiPalettePrimaryMain);
  display: block;
  opacity: 0;
  animation-name: insert-cursor-blink;
  animation-duration: 1s;
  animation-timing-function: steps(1);
  animation-iteration-count: infinite;
}

.result_input_char_cursor_edit {
  background-color: var(--muiPalettePrimaryMain);
}

.result_input_char_joiner {
  height: var(--morseInputCharJoinerHeight);
  position: relative;
}

.result_input_char_joiner_start {
  @extend .result_input_char_joiner;
  width: calc(100% + var(--morseInputCharGap));
}

.result_input_char_joiner_end {
  @extend .result_input_char_joiner;
  left: calc(-1 * var(--morseInputCharGap));
  width: calc(100% + var(--morseInputCharGap));
}

.result_input_char_joiner_middle {
  @extend .result_input_char_joiner;
  left: calc(-1 * var(--morseInputCharGap));
  width: calc(100% + 2 * var(--morseInputCharGap));
}

.result_input_char_joiner_hidden {
  @extend .result_input_char_joiner;
  visibility: hidden;
}

.result_output_char {
  height: var(--morseOutputCharHeight);
  font-size: var(--morseOutputCharFontSize);
  white-space: nowrap;
}
