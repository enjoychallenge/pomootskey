import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { fetch_count } from './counterAPI'

const initial_state = {
  value: 0,
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(increment_async(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const increment_async = createAsyncThunk(
  'counter/fetch_count',
  async (amount) => {
    const response = await fetch_count(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  }
)

export const counter_slice = createSlice({
  name: 'counter',
  initialState: initial_state,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    increment_by_amount: (state, action) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(increment_async.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(increment_async.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value += action.payload
      })
  },
})

export const { increment, decrement, increment_by_amount } =
  counter_slice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const select_count = (state) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const increment_if_odd = (amount) => (dispatch, get_state) => {
  const current_value = select_count(get_state())
  if (current_value % 2 === 1) {
    dispatch(increment_by_amount(amount))
  }
}

export default counter_slice.reducer
